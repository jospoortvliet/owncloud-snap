#!/bin/sh

root_option_file="$SNAP_APP_DATA_PATH/mysql/root.ini"
owncloud_password_file="$SNAP_APP_DATA_PATH/mysql/owncloud_password"
mysqld_pid_file_path=$SNAP_APP_DATA_PATH/mysql/`hostname`.pid
new_install=false

# Make sure the database is initialized (this is safe to run if already
# initialized)
mysqld --initialize-insecure --basedir="$SNAP_APP_PATH" --datadir="$SNAP_APP_DATA_PATH/mysql" --lc-messages-dir="$SNAP_APP_PATH/share"

# If the above command succeeded, it means this is a new installation.
if [ $? -eq 0 ]; then
	new_install=true
fi

# Start mysql
support-files/mysql.server start
mysql --socket="$SNAP_APP_DATA_PATH/mysql/mysql.sock" -u root -p

# Initialize new installation if necessary.
if [ $new_install = true ]; then
	# Generate a password for the root mysql user.
	echo -n "Generating root mysql password... "
	root_password=$(cat /dev/urandom | tr -dc _A-Z-a-z-0-9 | head -c64)
	echo "done."

	# Generate and record a password for the owncloud mysql user.
	echo -n "Generating owncloud mysql password... "
	owncloud_password=$(cat /dev/urandom | tr -dc _A-Z-a-z-0-9 | head -c64)
	echo "$owncloud_password" > $owncloud_password_file
	echo "done."

	# Save root user information
	echo "[client]" >> $root_option_file
	echo "socket=$SNAP_APP_DATA_PATH/mysql/mysql.sock" >> $root_option_file
	echo "user=root" >> $root_option_file
	chmod 600 $root_option_file

	# Now set everything up in one step:
	# 1) Set the root user's password
	# 2) Create the owncloud user
	# 3) Create the owncloud database
	# 4) Grant the owncloud user privileges on the owncloud database
	echo -n "Setting up users and owncloud database... "
	mysql --defaults-file=$root_option_file <<SQL
ALTER USER 'root'@'localhost' IDENTIFIED BY '$root_password';
CREATE USER 'owncloud'@'localhost' IDENTIFIED BY '$owncloud_password';
CREATE DATABASE owncloud;
GRANT ALL PRIVILEGES ON owncloud.* TO 'owncloud'@'localhost' IDENTIFIED BY '$owncloud_password';
SQL
	if [ $? -eq 0 ]; then
		echo "done."
	else
		echo "Failed to initialize-- reverting..."
		support-files/mysql.server stop
		rm -rf $SNAP_APP_DATA_PATH/mysql/*
	fi

	# Now the root mysql user has a password. Save that as well.
	echo "password=$root_password" >> $root_option_file
fi

# Check and upgrade mysql tables if necessary. There doesn't seem to be a good
# way to determine if the upgrade was necessary, but we're supposed to restart
# the server if it was, so we'll just restart it here anyway. It doesn't take
# long.
echo "Checking/upgrading mysql tables if necessary..."
mysql_upgrade --defaults-file=$root_option_file
echo "Restarting server after potential upgrade..."
support-files/mysql.server restart

# Wait here until mysql exits (turn a forking service into simple).
mysqld_pid=$(cat "$mysqld_pid_file_path")
while kill -0 $mysqld_pid 2>/dev/null; do
	sleep 1
done
